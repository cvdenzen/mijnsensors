%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Sun Feb  7 22:59:23 2021
%%Title: /home/carl/IdeaProjects/mijnsensors_github/Buitenlamp_Philips_Buscan/schema_bustan.sch
%%Author: carl
%%BoundingBox: 0 0 595 841
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7573 531 translate 90 rotate
0.625134 0.625134 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
43000 46000 43200 46000 10 line
43900 46000 43700 46000 10 line
43400 46100 43500 46000 10 line
43500 46000 43400 45900 10 line
43400 46100 43400 45900 10 line
43500 46100 43500 45900 10 line
43500 46000 43700 46000 10 line
43400 46000 43200 46000 10 line
43430 46140 43530 46240 10 line
43530 46240 43480 46210 10 line
43530 46240 43500 46190 10 line
43500 46140 43600 46240 10 line
43600 46240 43550 46210 10 line
43600 46240 43570 46190 10 line
60 60 42970 45970 fbox
60 60 43870 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 43800 46200 180.555557 text
grestore
gsave
44200 46000 44400 46000 10 line
45100 46000 44900 46000 10 line
44600 46100 44700 46000 10 line
44700 46000 44600 45900 10 line
44600 46100 44600 45900 10 line
44700 46100 44700 45900 10 line
44700 46000 44900 46000 10 line
44600 46000 44400 46000 10 line
44630 46140 44730 46240 10 line
44730 46240 44680 46210 10 line
44730 46240 44700 46190 10 line
44700 46140 44800 46240 10 line
44800 46240 44750 46210 10 line
44800 46240 44770 46190 10 line
60 60 44170 45970 fbox
60 60 45070 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 45000 46200 180.555557 text
grestore
gsave
45500 46000 45700 46000 10 line
46400 46000 46200 46000 10 line
45900 46100 46000 46000 10 line
46000 46000 45900 45900 10 line
45900 46100 45900 45900 10 line
46000 46100 46000 45900 10 line
46000 46000 46200 46000 10 line
45900 46000 45700 46000 10 line
45930 46140 46030 46240 10 line
46030 46240 45980 46210 10 line
46030 46240 46000 46190 10 line
46000 46140 46100 46240 10 line
46100 46240 46050 46210 10 line
46100 46240 46070 46190 10 line
60 60 45470 45970 fbox
60 60 46370 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 46300 46200 180.555557 text
grestore
gsave
46700 46000 46900 46000 10 line
47600 46000 47400 46000 10 line
47100 46100 47200 46000 10 line
47200 46000 47100 45900 10 line
47100 46100 47100 45900 10 line
47200 46100 47200 45900 10 line
47200 46000 47400 46000 10 line
47100 46000 46900 46000 10 line
47130 46140 47230 46240 10 line
47230 46240 47180 46210 10 line
47230 46240 47200 46190 10 line
47200 46140 47300 46240 10 line
47300 46240 47250 46210 10 line
47300 46240 47270 46190 10 line
60 60 46670 45970 fbox
60 60 47570 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 47500 46200 180.555557 text
grestore
gsave
48000 46000 48200 46000 10 line
48900 46000 48700 46000 10 line
48400 46100 48500 46000 10 line
48500 46000 48400 45900 10 line
48400 46100 48400 45900 10 line
48500 46100 48500 45900 10 line
48500 46000 48700 46000 10 line
48400 46000 48200 46000 10 line
48430 46140 48530 46240 10 line
48530 46240 48480 46210 10 line
48530 46240 48500 46190 10 line
48500 46140 48600 46240 10 line
48600 46240 48550 46210 10 line
48600 46240 48570 46190 10 line
60 60 47970 45970 fbox
60 60 48870 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 48800 46200 180.555557 text
grestore
gsave
49200 46000 49400 46000 10 line
50100 46000 49900 46000 10 line
49600 46100 49700 46000 10 line
49700 46000 49600 45900 10 line
49600 46100 49600 45900 10 line
49700 46100 49700 45900 10 line
49700 46000 49900 46000 10 line
49600 46000 49400 46000 10 line
49630 46140 49730 46240 10 line
49730 46240 49680 46210 10 line
49730 46240 49700 46190 10 line
49700 46140 49800 46240 10 line
49800 46240 49750 46210 10 line
49800 46240 49770 46190 10 line
60 60 49170 45970 fbox
60 60 50070 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 50000 46200 180.555557 text
grestore
gsave
50400 46000 50600 46000 10 line
51300 46000 51100 46000 10 line
50800 46100 50900 46000 10 line
50900 46000 50800 45900 10 line
50800 46100 50800 45900 10 line
50900 46100 50900 45900 10 line
50900 46000 51100 46000 10 line
50800 46000 50600 46000 10 line
50830 46140 50930 46240 10 line
50930 46240 50880 46210 10 line
50930 46240 50900 46190 10 line
50900 46140 51000 46240 10 line
51000 46240 50950 46210 10 line
51000 46240 50970 46190 10 line
60 60 50370 45970 fbox
60 60 51270 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 51200 46200 180.555557 text
grestore
gsave
51700 46000 51900 46000 10 line
52600 46000 52400 46000 10 line
52100 46100 52200 46000 10 line
52200 46000 52100 45900 10 line
52100 46100 52100 45900 10 line
52200 46100 52200 45900 10 line
52200 46000 52400 46000 10 line
52100 46000 51900 46000 10 line
52130 46140 52230 46240 10 line
52230 46240 52180 46210 10 line
52230 46240 52200 46190 10 line
52200 46140 52300 46240 10 line
52300 46240 52250 46210 10 line
52300 46240 52270 46190 10 line
60 60 51670 45970 fbox
60 60 52570 45970 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 52500 46200 180.555557 text
grestore
gsave
42900 47600 43100 47600 10 line
43800 47600 43600 47600 10 line
43300 47700 43400 47600 10 line
43400 47600 43300 47500 10 line
43300 47700 43300 47500 10 line
43400 47700 43400 47500 10 line
43400 47600 43600 47600 10 line
43300 47600 43100 47600 10 line
43330 47740 43430 47840 10 line
43430 47840 43380 47810 10 line
43430 47840 43400 47790 10 line
43400 47740 43500 47840 10 line
43500 47840 43450 47810 10 line
43500 47840 43470 47790 10 line
60 60 42870 47570 fbox
60 60 43770 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 43700 47800 180.555557 text
grestore
gsave
44100 47600 44300 47600 10 line
45000 47600 44800 47600 10 line
44500 47700 44600 47600 10 line
44600 47600 44500 47500 10 line
44500 47700 44500 47500 10 line
44600 47700 44600 47500 10 line
44600 47600 44800 47600 10 line
44500 47600 44300 47600 10 line
44530 47740 44630 47840 10 line
44630 47840 44580 47810 10 line
44630 47840 44600 47790 10 line
44600 47740 44700 47840 10 line
44700 47840 44650 47810 10 line
44700 47840 44670 47790 10 line
60 60 44070 47570 fbox
60 60 44970 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 44900 47800 180.555557 text
grestore
gsave
45400 47600 45600 47600 10 line
46300 47600 46100 47600 10 line
45800 47700 45900 47600 10 line
45900 47600 45800 47500 10 line
45800 47700 45800 47500 10 line
45900 47700 45900 47500 10 line
45900 47600 46100 47600 10 line
45800 47600 45600 47600 10 line
45830 47740 45930 47840 10 line
45930 47840 45880 47810 10 line
45930 47840 45900 47790 10 line
45900 47740 46000 47840 10 line
46000 47840 45950 47810 10 line
46000 47840 45970 47790 10 line
60 60 45370 47570 fbox
60 60 46270 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 46200 47800 180.555557 text
grestore
gsave
46600 47600 46800 47600 10 line
47500 47600 47300 47600 10 line
47000 47700 47100 47600 10 line
47100 47600 47000 47500 10 line
47000 47700 47000 47500 10 line
47100 47700 47100 47500 10 line
47100 47600 47300 47600 10 line
47000 47600 46800 47600 10 line
47030 47740 47130 47840 10 line
47130 47840 47080 47810 10 line
47130 47840 47100 47790 10 line
47100 47740 47200 47840 10 line
47200 47840 47150 47810 10 line
47200 47840 47170 47790 10 line
60 60 46570 47570 fbox
60 60 47470 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 47400 47800 180.555557 text
grestore
gsave
47900 47600 48100 47600 10 line
48800 47600 48600 47600 10 line
48300 47700 48400 47600 10 line
48400 47600 48300 47500 10 line
48300 47700 48300 47500 10 line
48400 47700 48400 47500 10 line
48400 47600 48600 47600 10 line
48300 47600 48100 47600 10 line
48330 47740 48430 47840 10 line
48430 47840 48380 47810 10 line
48430 47840 48400 47790 10 line
48400 47740 48500 47840 10 line
48500 47840 48450 47810 10 line
48500 47840 48470 47790 10 line
60 60 47870 47570 fbox
60 60 48770 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 48700 47800 180.555557 text
grestore
gsave
49100 47600 49300 47600 10 line
50000 47600 49800 47600 10 line
49500 47700 49600 47600 10 line
49600 47600 49500 47500 10 line
49500 47700 49500 47500 10 line
49600 47700 49600 47500 10 line
49600 47600 49800 47600 10 line
49500 47600 49300 47600 10 line
49530 47740 49630 47840 10 line
49630 47840 49580 47810 10 line
49630 47840 49600 47790 10 line
49600 47740 49700 47840 10 line
49700 47840 49650 47810 10 line
49700 47840 49670 47790 10 line
60 60 49070 47570 fbox
60 60 49970 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 49900 47800 180.555557 text
grestore
gsave
50300 47600 50500 47600 10 line
51200 47600 51000 47600 10 line
50700 47700 50800 47600 10 line
50800 47600 50700 47500 10 line
50700 47700 50700 47500 10 line
50800 47700 50800 47500 10 line
50800 47600 51000 47600 10 line
50700 47600 50500 47600 10 line
50730 47740 50830 47840 10 line
50830 47840 50780 47810 10 line
50830 47840 50800 47790 10 line
50800 47740 50900 47840 10 line
50900 47840 50850 47810 10 line
50900 47840 50870 47790 10 line
60 60 50270 47570 fbox
60 60 51170 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 51100 47800 180.555557 text
grestore
gsave
51600 47600 51800 47600 10 line
52500 47600 52300 47600 10 line
52000 47700 52100 47600 10 line
52100 47600 52000 47500 10 line
52000 47700 52000 47500 10 line
52100 47700 52100 47500 10 line
52100 47600 52300 47600 10 line
52000 47600 51800 47600 10 line
52030 47740 52130 47840 10 line
52130 47840 52080 47810 10 line
52130 47840 52100 47790 10 line
52100 47740 52200 47840 10 line
52200 47840 52150 47810 10 line
52200 47840 52170 47790 10 line
60 60 51570 47570 fbox
60 60 52470 47570 fbox
grestore
gsave
false false false false 202.222224 [(D?) ] 0 52400 47800 180.555557 text
grestore
42400 47100 53000 47100 10 line
53000 47100 53000 48400 10 line
53000 48400 42400 48400 10 line
42400 48400 42400 47100 10 line
42400 45500 53000 45500 10 line
53000 45500 53000 46600 10 line
53000 46600 42400 46600 10 line
42400 46600 42400 45500 10 line
gsave
false true false true 202.222224 [(V2+) ] 0 42900 46400 180.555557 text
grestore
gsave
false false false false 202.222224 [(V2+) ] 0 42600 48100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V2-) ] 0 42500 47300 180.555557 text
grestore
gsave
false false false false 202.222224 [(V2-) ] 0 42600 45700 180.555557 text
grestore
gsave
false false false false 202.222224 [(V1-) ] 0 52500 45600 180.555557 text
grestore
gsave
false false false false 202.222224 [(V1-) ] 0 52500 47200 180.555557 text
grestore
gsave
false false false false 202.222224 [(V1+) ] 0 52600 48100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V1+) ] 0 52600 46400 180.555557 text
grestore
41900 46400 40600 46400 10 line
gsave
42240 46400 41900 46400 10 line
42340 46400 100 0 360 10 darc
grestore
gsave
false false false true 202.222224 [(T?) ] 0 42550 46450 180.555557 text
grestore
gsave
42240 47300 41900 47300 10 line
42340 47300 100 0 360 10 darc
grestore
gsave
false false false true 202.222224 [(T?) ] 0 42550 47350 180.555557 text
grestore
41900 47300 40500 47300 10 line
gsave
false false false false 202.222224 [(+20V) ] 0 41400 46000 180.555557 text
grestore
gsave
false false false false 202.222224 [(+10V) ] 0 54500 46900 180.555557 text
grestore
gsave
53160 48300 53500 48300 10 line
53060 48300 100 0 360 10 darc
grestore
gsave
false true false false 202.222224 [(T?) ] 0 52850 48250 180.555557 text
grestore
gsave
53160 45700 53500 45700 10 line
53060 45700 100 0 360 10 darc
grestore
gsave
false true false false 202.222224 [(T?) ] 0 52850 45650 180.555557 text
grestore
53500 48300 53500 45700 10 line
gsave
false false false false 202.222224 [(Voeding Bustan lamp: Uout max 42V) (Iout DC 350mA) (Pout rated 10W) ] 0 47300 44400 180.555557 text
grestore
43700 42500 1800 0 360 10 darc
gsave
44360 43500 44700 43500 10 line
44260 43500 100 0 360 10 darc
60 60 44670 43470 fbox
grestore
gsave
false true false false 202.222224 [(T?) ] 0 44050 43450 180.555557 text
grestore
gsave
44860 43000 45200 43000 10 line
44760 43000 100 0 360 10 darc
60 60 45170 42970 fbox
grestore
gsave
false true false false 202.222224 [(T?) ] 0 44550 42950 180.555557 text
grestore
gsave
44860 42300 45200 42300 10 line
44760 42300 100 0 360 10 darc
60 60 45170 42270 fbox
grestore
gsave
false true false false 202.222224 [(T3) ] 0 44550 41950 180.555557 text
grestore
gsave
43040 41400 42700 41400 10 line
43140 41400 100 0 360 10 darc
60 60 42670 41370 fbox
grestore
gsave
false false false true 202.222224 [(T4) ] 0 43350 41450 180.555557 text
grestore
gsave
42640 42000 42300 42000 10 line
42740 42000 100 0 360 10 darc
60 60 42270 41970 fbox
grestore
gsave
false false false true 202.222224 [(T5) ] 0 43150 42050 180.555557 text
grestore
gsave
42540 42800 42200 42800 10 line
42640 42800 100 0 360 10 darc
60 60 42170 42770 fbox
grestore
gsave
false false false true 202.222224 [(T6) ] 0 42950 42850 180.555557 text
grestore
45200 43300 46000 43300 10 line
46000 43300 46000 43700 10 line
46000 43700 45200 43700 10 line
45200 43700 45200 43300 10 line
gsave
false false false false 202.222224 [(BS612 pir onderaanzicht) ] 0 40800 44200 180.555557 text
grestore
gsave
false false false false 202.222224 [(netname=0V) ] 0 44300 41700 180.555557 text
grestore
gsave
false true false true 202.222224 [(netname=+3V3) ] 0 43400 41700 180.555557 text
grestore
gsave
false true false true 202.222224 [(netname=RELOutput) ] 0 42900 42300 180.555557 text
grestore
gsave
false true false true 202.222224 [(ONTIME) ] 0 42800 42600 180.555557 text
grestore
60 60 42970 45970 fbox
60 60 43870 45970 fbox
60 60 44170 45970 fbox
60 60 45070 45970 fbox
60 60 45470 45970 fbox
60 60 46370 45970 fbox
60 60 46670 45970 fbox
60 60 47570 45970 fbox
60 60 47970 45970 fbox
60 60 48870 45970 fbox
60 60 49170 45970 fbox
60 60 50070 45970 fbox
60 60 50370 45970 fbox
60 60 51270 45970 fbox
60 60 51670 45970 fbox
60 60 52570 45970 fbox
60 60 42870 47570 fbox
60 60 43770 47570 fbox
60 60 44070 47570 fbox
60 60 44970 47570 fbox
60 60 45370 47570 fbox
60 60 46270 47570 fbox
60 60 46570 47570 fbox
60 60 47470 47570 fbox
60 60 47870 47570 fbox
60 60 48770 47570 fbox
60 60 49070 47570 fbox
60 60 49970 47570 fbox
60 60 50270 47570 fbox
60 60 51170 47570 fbox
60 60 51570 47570 fbox
60 60 52470 47570 fbox
60 60 40570 46370 fbox
60 60 40470 47270 fbox
60 60 44670 43470 fbox
60 60 45170 42970 fbox
60 60 45170 42270 fbox
60 60 42670 41370 fbox
60 60 42270 41970 fbox
60 60 42170 42770 fbox
showpage
%%End
