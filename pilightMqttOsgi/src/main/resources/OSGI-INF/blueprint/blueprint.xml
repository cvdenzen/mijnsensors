<?xml version="1.0" encoding="UTF-8"?>
<!--


camel v 3.5.0 oct 2020

-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">
    <!-- blueprint property placeholders -->
    <cm:property-placeholder persistent-id="my-placeholders" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="pahoPubOptions"
                         value="qos=0&amp;connectionTimeout=600&amp;retained=true&amp;lazyStartProducer=true"/>
            <cm:property name="destination" value="mock:result"/>
        </cm:default-properties>
    </cm:property-placeholder>
    <camelContext xmlns="http://camel.apache.org/schema/blueprint" id="blueprintcontext">
        <dataFormats>
            <json id="jsonJsonOHRestItem" library="Gson"
                  unmarshalTypeName="nl.vandenzen.iot.json.JsonOHRestItem"/>
            <!-- unmarshal to List<Map> is supported by Jackson json -->
            <json id="jsonjackson" library="Jackson" useList="true"/>
        </dataFormats>

        <!-- hopeloos, te weinig documentatie om dit goed te krijgen -->
        <!-- route id="DefineCache" autoStartup="true" startupOrder="5">
		<from uri="ehcache://oh?configurationUri=file:${karaf.home}/etc/ehcache.xml"/>
		<from uri="ehcache://oh?configurationUri=classpath:etc/ehcache.xml"/>
		    <to uri="log:nl.vandenzen.iot?level=INFO"/>
        </route -->


        <!-- When started, not stable (we don't know whether tv is on or off etc.) -->
        <route id="Init" autoStartup="true" startupOrder="1">
            <from uri="timer:inittimer?repeatCount=1"/>
            <to uri="direct:set_stable_false"/>

            <!-- REST calls to OpenHab -->
            <setHeader name="OHItems">
                <groovy>new String[]{"bg_w_tv_w","bg_x_imac3","bg_x_imac4","gGFActivity"}
                </groovy>
            </setHeader>
            <to uri="direct:getOHItems"/>
            <!-- Results are in header OHItemsResult, it is probably a String[] -->

            <setBody>
                <groovy>request.headers.OHItemsResult[0]</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_w_tv_w" method="setValue"/>

            <setBody>
                <groovy>request.headers.OHItemsResult[1]</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_x_imac3" method="setValue"/>

            <setBody>
                <groovy>request.headers.OHItemsResult[2]</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_x_imac4" method="setValue"/>

            <setBody>
                <groovy>request.headers.OHItemsResult[3]</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Integer"/>
            <bean ref="gGFActivity" method="setValue"/>

        </route>

        <route id="HelloWorldFromBlueprint" autoStartup="true" startupOrder="6">
            <from uri="timer:simple?period=5000&amp;repeatCount=3"/>
            <setBody>
                <simple>Hello World from blueprint</simple>
            </setBody>
            <to uri="log:nl.vandenzen.iot?level=INFO"/>
        </route>

        <route id="convert_body_to_boolean" autoStartup="true" startupOrder="7">
            <from uri="direct:convert_body_to_boolean"/>
            <log message="convert_body_to_boolean entry body=${body}"/>
            <choice>
                <when>
                    <groovy>
                        java.util.logging.Logger logger = java.util.logging.Logger.getLogger("");
                        logger.info ("I am a test info log");
                        if ("1".equals(request.body)) logger.info("\"1\".equals(request.body) is true");
                        if (request.body == 1) {logger.info("request.body == 1 is true");}
                        if (request.body == true) {logger.info("request.body == true is true");}
                        if ('ON'.equals(request.body)) {logger.info("'ON'.equals(request.body) is true");}
                        if ("ON".equals(request.body)) {logger.info("\"ON\".equals(request.body) is true");}
                        if ("true".equals(request.body)) {logger.info("\"true\".equals(request.body) is true");}
                        logger.info("class is "+request.body.getClass().toString());
                        logger.info("class van byte[] is "+byte[].class.toString());
                        "1".equals(request.body)
                        || request.body == 1
                        || request.body == true
                        || 'ON'.equals(request.body)
                        || "ON".equals(request.body)
                        || "true".equals(request.body)
                        || (request.body!=null &amp;&amp; request.body.getClass().equals(byte[].class) &amp;&amp; new
                        String(request.body).matches("1|ON")) /* input is
                        byte[] */
                    </groovy>
                    <log message="convert_body_to_boolean set to true for body=${body}"/>
                    <setBody>
                        <constant>true</constant>
                    </setBody>
                </when>
                <otherwise>
                    <log message="convert_body_to_boolean set to false for body=${body}"/>
                    <setBody>
                        <constant>false</constant>
                    </setBody>
                </otherwise>
            </choice>
            <convertBodyTo type="java.lang.Boolean"/>
            <log message="convert_body_to_boolean return body=${body}"/>
        </route>

        <!-- Set OpenHab Item to value: use a rest POST call to OpenHab. This will probably
             send a command to the item.
             Input: header.OHItem, body.
             If header.OHItem contains a comma (,), it will be split and
             all OHItems will be set to the value of the body -->
        <route id="setOHItem" autoStartup="true">
            <from uri="direct:setOHItem"/>
            <log message="setOHItem header.OHItem=${header.OHItem}, body=${body}"/>
            <choice>
                <when>
                    <groovy>headers.OHItem.contains(",")</groovy>
                    <log message="header contains ,"/>
                    <!-- save body contents -->
                    <setHeader name="savedBody">
                        <simple>${body}</simple>
                    </setHeader>
                    <split>
                        <simple>${header.OHItem}</simple>
                        <!-- restore header -->
                        <!-- Header has been split into the body -->
                        <setHeader name="OHItem">
                            <simple>${body}</simple>
                        </setHeader>
                        <!-- restore body -->
                        <setBody>
                            <simple>${header.savedBody}</simple>
                        </setBody>
                        <log message="setOHItem after split and restore header.OHItem=${header.OHItem}, body=${body}"/>
                        <to uri="direct:setOHItem"/>
                    </split>
                </when>
                <otherwise>
                    <setHeader name="CamelHttpMethod">
                        <constant>POST</constant>
                    </setHeader>
                    <setHeader name="Content-Type">
                        <constant>text/plain</constant>
                    </setHeader>
                    <setHeader name="Accept">
                        <constant>application/json</constant>
                    </setHeader>
                    <log message="setOHItem http://127.0.0.1:8080/rest/items/${header.OHItem} to ${body}"/>
                    <recipientList>
                        <simple>http://127.0.0.1:8080/rest/items/${header.OHItem}</simple>
                    </recipientList>
                    <log message="setOHItem http://127.0.0.1:8080/rest/items/${header.OHItem} result ${body}"/>
                </otherwise>
            </choice>
        </route>

        <!-- Do a REST call to OpenHab to get the value of one item who's name is in headers.OHItem, into body -->
        <route id="getOHItem" autoStartup="true" streamCache="true">
            <from uri="direct:getOHItem"/>
            <!-- <log message="getOHItem header.OHItem=${header.OHItem}"/> -->
            <choice>
                <when>
                    <groovy>headers.OHItem.contains(",")</groovy>
                    <log message="header contains ,"/>
                    <!-- save body contents -->
                    <setHeader name="savedBody">
                        <simple>${body}</simple>
                    </setHeader>
                    <split>
                        <simple>${header.OHItem}</simple>
                        <!-- restore header -->
                        <!-- Header has been split into the body -->
                        <setHeader name="OHItem">
                            <simple>${body}</simple>
                        </setHeader>
                        <!-- restore body -->
                        <setBody>
                            <simple>${header.savedBody}</simple>
                        </setBody>
                        <log message="OHItem na split and restore is ${header.OHItem}"/>
                        <log message="body na split and restore is ${body}"/>
                        <log message="ERROR: multiple items is NOT SUPPORTED, too difficult dynamic header name"/>
                        <!-- to uri="direct:getOHItem"/ -->
                    </split>
                </when>
                <otherwise>
                    <setHeader name="CamelHttpMethod">
                        <constant>GET</constant>
                    </setHeader>
                    <setHeader name="Content-Type">
                        <constant>text/plain</constant>
                    </setHeader>
                    <setHeader name="Accept">
                        <constant>application/json</constant>
                    </setHeader>
                    <!-- log message="getOHItem http://127.0.0.1:8080/rest/items/${header.OHItem}"/ -->
                    <recipientList>
                        <simple>http://127.0.0.1:8080/rest/items/${header.OHItem}</simple>
                    </recipientList>
                    <!-- log message="getOHItem http://127.0.0.1:8080/rest/items/${header.OHItem} result ${body}"/ -->
                    <unmarshal>
                        <custom ref="jsonJsonOHRestItem"/>
                    </unmarshal>
                    <!-- log message="headers.OHItem na rest en unmarshall=${headers.OHItem}"/ -->
                    <setBody>
                        <groovy>body.state</groovy>
                    </setBody>
                    <log message="getOHItem: headers.OHItem=${headers.OHItem}, body=${body}"/>
                </otherwise>
            </choice>
        </route>

        <!-- ** Multiple items.
        Do a REST call to OpenHab to get the value items
         Input: header OHItems, array of Strings (names of items)
         Output: body, array of Strings
                 header OHItemsResult,  String[] (same as body) -->
        <route id="getOHItems" autoStartup="true" streamCache="true">
            <from uri="direct:getOHItems"/>
            <log message="getOHItems body=${body}"/>
            <log message="getOHItems OHItems=${header.OHItems}"/>
            <setHeader name="OHItemsResult">
                <groovy>new String[request.headers.OHItems.length]</groovy>
            </setHeader>
            <loop>
                <groovy>result=request.headers.OHItems.length</groovy>
                <setHeader name="OHItem">
                    <groovy>request.headers.OHItems[exchange.allProperties.CamelLoopIndex]</groovy>
                </setHeader>
                <to uri="direct:getOHItem"/>
                <!-- Result is in body -->
                <setHeader name="dummy">
                    <groovy>request.headers.OHItemsResult[exchange.allProperties.CamelLoopIndex]=request.body</groovy>
                </setHeader>
            </loop>
            <setBody>
                <groovy>request.headers.OHItemsResult</groovy>
            </setBody>
        </route>
        <!-- Test setOHItem-->
        <route id="testCamel" autoStartup="false">
            <from uri="quartz://groep/timerTestGetOHItem?cron=0/10+*+*+*+*+?"/>
            <setHeader name="OHItem">
                <groovy>"Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"
                </groovy>
            </setHeader>
            <log message="log from testSetOHItem http://127.0.0.1:8080/rest/items/${header.OHItem}"/>
            <setBody>
                <!-- percentage 0..100 -->
                <simple>ON</simple>
            </setBody>
            <to uri="direct:getOHItem"/>
            <log message="body=${body}, headers.OHItem=${headers.OHItem}"/>
            <log message="headers.Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm=${headers.Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm}"/>
            <log message="headers.Light_GF_Huiskamer_LampGroteKast_Dimm=${headers.Light_GF_Huiskamer_LampGroteKast_Dimm}"/>
            <log message="Light_GF_Huiskamer_LampLadenkastje_Dimm=${headers.Light_GF_Huiskamer_LampLadenkastje_Dimm}"/>
            <log message="bg_w_tv_w=${headers.bg_w_tv_w}"/>
            <to uri="direct:SetHeaders"/>
            <log message="testCamel, header.AutoOffEnabled  =${header.AutoOffEnabled}"/>
            <log message="testCamel, header.bg_w_tv_w       =${header.bg_w_tv_w}"/>
            <log message="testCamel, header.Stable          =${header.Stable}"/>
        </route>

        <!-- Deze werkt 17 jan 2020.-->
        <route id="achterlichtAan2020" autoStartup="true">
            <from uri="direct:achterlichtaan2020"/>
            <log message="achterlichtaan2020"/>
            <to uri="direct:set_HueStable_false"/>
            <setHeader name="OHItem">
                <constant>Light_GF_Huiskamer_Achterdeur_Schemerlamp_Toggle</constant>
            </setHeader>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
        </route>


        <route id="achterlichtUit2020" autoStartup="true">
            <from uri="direct:achterlichtuit2020"/>
            <log message="achterlichtuit2020"/>
            <to uri="direct:set_HueStable_false"/>
            <setHeader name="OHItem">
                <constant>Light_GF_Huiskamer_Achterdeur_Schemerlamp_Toggle</constant>
            </setHeader>
            <setBody>
                <constant>OFF</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
        </route>

        <!-- set header and bean -->
        <route id="requestLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm" autoStartup="true" streamCache="true">
            <from uri="direct:requestLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"/>
            <setHeader name="OHItem">
                <constant>Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <!-- send String that can be converted to Integer -->
            <to uri="direct:setLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"/>
        </route>

        <route id="setLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm" autoStartup="true">
            <from uri="direct:setLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Float"/>
            <bean ref="Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm" method="setValue"/>
            <setHeader name="Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm">
                <method ref="Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm" method="getValue"/>
            </setHeader>
        </route>


        <!-- Zet lichten aan -->
        <route id="ZetLichtenAan" autoStartup="true" startupOrder="101">
            <from uri="direct:ZetLichtenAan"/>
            <log message="Lichten gaan aan!"/>
            <to uri="direct:set_HueStable_false"/>
            <setHeader name="OHItem">
                <groovy>"Light_GF_Huiskamer_LampGroteKast_Toggle,Light_GF_Huiskamer_LampLadenkastje_Toggle,"
                    .concat("Light_GF_Huiskamer_Achterdeur_Schemerlamp_Toggle,")
                    .concat("Light_GF_Huiskamer_Kerstboom")
                </groovy>
            </setHeader>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
            <!-- special case (but not anymore) because previous three bulbs were Dimm (but now also Toggle) -->
            <setHeader name="OHItem">
                <constant>Light_GF_Huiskamer_Achter_Staandelamp</constant>
            </setHeader>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
        </route>

        <!-- Zet lichten uit, behalve Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm, die gaat na een tijdje uit -->
        <route id="ZetLichtenUit" autoStartup="true" startupOrder="102">
            <from uri="direct:ZetLichtenUit"/>
            <log message="Lichten gaan uit!"/>
            <to uri="direct:set_HueStable_false"/>
            <setHeader name="OHItem">
                <groovy>"Light_GF_Huiskamer_LampGroteKast_Toggle,Light_GF_Huiskamer_LampLadenkastje_Toggle,"
                    .concat("Light_GF_Huiskamer_Kerstboom")
                </groovy>
            </setHeader>
            <setBody>
                <constant>OFF</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
            <setHeader name="OHItem">
                <constant>Light_GF_Huiskamer_Achter_Staandelamp</constant>
            </setHeader>
            <setBody>
                <constant>OFF</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
            <!-- delayed switch off for AchterdeurSchemerlamp -->
            <bean ref="GF_Passenger_minutes" method="getMilliSeconds"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="setDelay"/>
            <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="restartTimer"/>
        </route>


        <!-- als de schakelaar gebruikt wordt, moet de pir-automaat gecancelled worden -->
        <route id="dimmerSwitchBijTv" autoStartup="true" startupOrder="108">
            <from uri="paho:oh/all/WoonkamerSchakelaarBijTv/state?connectionTimeout=600"/>
            <log message="aho:oh/all/WoonkamerSchakelaarBijTv/state=${body}"/>
            <to uri="direct:set_HueStable_false"/>
            <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="cancel"/>
        </route>

        <route id="LichtIntensiteit_Woonkamer_updated" autoStartup="true" startupOrder="200">
            <from uri="paho:oh/all/LichtIntensiteit_Woonkamer/state?connectionTimeout=600"/>
            <!-- to uri="log:nl.vandenzen.iot?level=INFO"/ -->
            <log message="LichtIntensiteit_Woonkamer_updated: body=${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Float"/>
            <log message="LichtIntensiteit_Woonkamer updated (oh/.../state): header.LichtIntensiteit_Woonkamer=${body}"/>
            <to uri="direct:Enable_lights_on_by_daylight"/>
        </route>

        <route id="calcOneLightOn" autoStartup="true" startupOrder="201">
            <from uri="direct:calcOneLightOn"/>
            <log message="Start calcOneLightOn, body=${body}"/>
            <!-- set states of light etc. in header of the message -->
            <to uri="direct:SetHeaders"/>
            <log message="header.LichtIntensiteit_Woonkamer=${header.LichtIntensiteit_Woonkamer}"/>
            <log message="header.LightsOnIntensityThreshold=${header.LightsOnIntensityThreshold}"/>
            <log message="header.Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm=${header.Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm}"/>
            <log message="header.pir_gf_achterdeur17=${header.pir_gf_achterdeur17}"/>

            <setHeader name="HueStable">
                <method ref="HueStable" method="getValue"/>
            </setHeader>
            <choice>
                <when>
                    <simple>
                        ${header.HueStable}
                    </simple>
                    <log message="calcOneLightOn, HueStable is true, continuing"/>
                    <when>
                        <simple>${header.pir_gf_achterdeur17}</simple>
                        <log message="pir is true"/>
                        <when>
                            <!-- it is dark -->
                            <groovy>
                                java.lang.Float.valueOf(headers.LichtIntensiteit_Woonkamer)
                                &lt; java.lang.Float.valueOf(headers.LightsOnIntensityThreshold)
                            </groovy>
                            <log message="lichtinsiteit woonkamer&lt;threshold"/>
                            <when>
                                <simple>${header.Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm} &lt; 1</simple>
                                <setBody>
                                    <simple>het licht is uit</simple>
                                </setBody>
                                <to uri="log:nl.vandenzen.iot?level=INFO"/>
                                <to uri="direct:achterlichtaan2020"/>
                                <bean ref="GF_Passenger_minutes" method="getMilliSeconds"/>
                                <convertBodyTo type="java.lang.String"/>
                                <convertBodyTo type="java.lang.Long"/>
                                <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="setDelay"/>
                                <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="schedule"/>
                            </when>
                        </when>
                    </when>
                </when>
            </choice>
            <!-- delay, extend with each action on pir -->
            <bean ref="GF_Passenger_minutes" method="getMilliSeconds"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="setDelay"/>
            <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="extend"/>
        </route>

        <!-- This is used, AutoOffEnabled -->
        <route id="listenAutoOffEnabled" autoStartup="true" startupOrder="202">
            <from uri="paho:oh/all/AutoOffEnabled/state?connectionTimeout=600"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="AutoOffEnabled" method="setValue"/>
            <!-- Turn off lights? -->
            <log message="listenAutoOffEnabled: AutoOffEnabled set to ${body}"/>
            <to uri="direct:LightsOffCalc"/>
        </route>
        <!-- This is used, AutoOnEnabled -->
        <route id="listenAutoOnEnabled" autoStartup="true" startupOrder="203">
            <from uri="paho:oh/all/AutoOnEnabled/state?connectionTimeout=600"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="AutoOnEnabled" method="setValue"/>
            <!-- Turn on lights? -->
            <log message="listenAutoOnEnabled: AutoOnEnabled set to ${body}"/>
            <to uri="direct:Enable_lights_on_by_daylight"/>
        </route>
        <route id="listenLightsOnIntensityThreshold" autoStartup="true" startupOrder="204">
            <from uri="paho:oh/all/LightsOnIntensityThreshold/state?connectionTimeout=600"/>
            <log message="paho:oh/all/LightsOnIntensityThreshod changed to ${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="log:nl.vandenzen.iot?level=INFO"/>
            <convertBodyTo type="java.lang.Float"/>
            <convertBodyTo type="java.lang.Integer"/>
            <to uri="log:nl.vandenzen.iot?level=INFO"/>
            <!-- Turn on lights? -->
            <to uri="direct:Enable_lights_on_by_daylight"/>
        </route>
        <route id="listenLight_GF_Huiskamer_Achterdeur_Schemerlamp" autoStartup="true" startupOrder="205">
            <from uri="paho:oh/all/Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm/state?connectionTimeout=600"/>
            <to uri="direct:setLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"/>
            <to uri="direct:calcOneLightOn"/>
        </route>
        <route id="listenGF_Passenger_minutes" autoStartup="true" startupOrder="206">
            <from uri="paho:oh/all/GF_Passenger_minutes/state?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Integer"/>
            <bean ref="GF_Passenger_minutes" method="setValue"/>
        </route>
        <route id="listen_bg_w_tv_w_mqtt" autoStartup="true" startupOrder="216">
            <from uri="paho:oh/all/bg_w_tv_w/state?connectionTimeout=600"/>
            <log message="listen_bg_w_tv_mqtt: received message ${body}"/>
            <!-- convert Byte[] to string -->
            <convertBodyTo type="java.lang.String"/>
            <to uri="direct:listen_bg_w_tv_w"/>
        </route>

        <route id="listen_bg_w_tv_w_timer" autoStartup="true" startupOrder="217">
            <from uri="quartz://groep/timer_bg_w_tv_w_?cron=3/15+*+*+*+*+?"/>
            <setHeader name="OHItem">
                <constant>bg_w_tv_w</constant>
            </setHeader>
            <!-- Get state of OpenHab item -->
            <to uri="direct:getOHItem"/>
            <to uri="direct:listen_bg_w_tv_w"/>
        </route>

        <!-- Input is body with value ON of OFF for tv -->
        <route id="listen_bg_w_tv_w" autoStartup="true" startupOrder="218">
            <from uri="direct:listen_bg_w_tv_w"/>
            <log message="bg_w_tv_w/state: new: ${body}"/>
            <!-- get old value of bg_w_tv_w -->
            <setHeader name="bg_w_tv_w">
                <method ref="bg_w_tv_w" method="getValue"/>
            </setHeader>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_w_tv_w" method="setValue"/>
            <log message="Values old: ${headers.bg_w_tv_w}, new: ${body}"/>
            <!-- restore body contents after log message -->
            <bean ref="bg_w_tv_w" method="getValue"/>
            <!-- Changed? -->
            <choice>
                <when>
                    <!-- normally this would not happen, as only changes are reported -->
                    <simple>${in.headers.bg_w_tv_w} == ${body}</simple>
                    <!-- log message="bg_w_tv_w same value old: ${headers.bg_w_tv_w}, new: ${body}"/ -->
                </when>
                <otherwise>
                    <!-- tv status has changed, body is new value (Boolean) -->
                    <!-- set stable false will automatically set it to true after a specified time -->
                    <to uri="direct:set_stable_false"/>
                    <setBody>
                        <method ref="bg_w_tv_w" method="getValue"/>
                    </setBody>
                    <choice>
                        <when>
                            <simple>${body}</simple>
                            <!-- tv is on -->
                            <log message="tv changed to on:${body}"/>
                            <to uri="direct:calcMediaboxOn"/>
                        </when>
                        <otherwise>
                            <log message="tv changed to off:${body}"/>
                            <to uri="direct:calcMediaboxOff"/>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
        </route>

        <route id="listen_bg_x_imac4" autoStartup="true" startupOrder="207">
            <from uri="paho:oh/all/bg_x_imac4/state?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_x_imac4" method="setValue"/>
            <!-- check whether to turn lights off -->
            <to uri="direct:LightsOffCalc"/>
        </route>

        <route id="listen_bg_x_imac3" autoStartup="true" startupOrder="208">
            <from uri="paho:oh/all/bg_x_imac3/state?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="listen_bg_x_imac3 body=${body}"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_x_imac3" method="setValue"/>
            <!-- check whether to turn lights off -->
            <to uri="direct:LightsOffCalc"/>
        </route>

        <!-- not used 17 jan 2020
         Used again 23 may 2022 -->
        <route id="listenPir_gf_achterdeur17" autoStartup="true" startupOrder="209">
            <from uri="paho:oh/all/pir_gf_achterdeur17/state?connectionTimeout=600"/>
            <log message="listenPir_gf_achterdeur17 body=${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <choice>
                <when>
                    <simple>${in.body} == "CLOSED" || ${body} == "1"</simple>
                    <setBody>
                        <constant>true</constant>
                    </setBody>
                </when>
                <otherwise>
                    <setBody>
                        <constant>false</constant>
                    </setBody>
                </otherwise>
            </choice>
            <convertBodyTo type="java.lang.Boolean"/>
            <bean ref="pir_gf_achterdeur17" method="setValue"/>
            <!-- Turn on lights? -->
            <to uri="direct:calcOneLightOn"/>
            <to uri="direct:calcMediabox"/>
        </route>

        <!-- Listen to mysensors mqtt gateway, 17 jan 2020, not to openhab item.
             This could be faster (no openhab action in between) -->
        <route id="listenPir_gf_achterdeur17a" autoStartup="true" startupOrder="220">
            <from uri="paho:mysensors/all/153/1/1/0/2?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="listenPir_gf_achterdeur17a locA is ${body}"/>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="pir_gf_achterdeur17" method="setValue"/>
            <!-- Turn on lights? -->
            <to uri="direct:calcOneLightOn"/>
        </route>

        <!-- This doesn't seem to work, group gGFActivity -->
        <route id="listen_gGFActivity" autoStartup="true" startupOrder="210">
            <from uri="paho:oh/all/gGFActivity/state?connectionTimeout=600"/>
            <!-- from byte[] -->
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Integer"/>
            <log message="listen_gGFActivity is ${body}"/>
            <bean ref="gGFActivity" method="setValue"/>
            <!-- check whether to turn lights off -->
            <to uri="direct:LightsOffCalc"/>
        </route>
        <route id="AutoOnEnabled_aan" autoStartup="true" startupOrder="301">
            <!-- s m h day-of-month month day-of-week year(optional) -->
            <from uri="quartz://groep/timer1?cron=0+0+12+*+*+?"/>
            <!-- deprecated, now in OpenHab dec 2020 -->
            <!--
            <setBody>
                <constant>true</constant>
            </setBody>
            <bean ref="AutoOnEnabled" method="setValue"/>
            <log message="bean AutoOnEnabled set to ${body}"/>
            -->
            <setBody>
                <constant>ON</constant>
            </setBody>
            <setHeader name="OHItem">
                <constant>AutoOnEnabled</constant>
            </setHeader>
            <to uri="direct:setOHItem"/>
        </route>
        <route id="AutoOffEnabled_aan" autoStartup="true" startupOrder="302">
            <!-- s m h day-of-month month day-of-week year(optional) -->
            <from uri="quartz://groep/timer2?cron=47+50+22+*+*+?"/>
            <!-- deprecated, now in OpenHab dec 2020 -->
            <!--
            <setBody>
                <constant>true</constant>
            </setBody>
            <bean ref="AutoOffEnabled" method="setValue"/>
            -->
            <setBody>
                <constant>ON</constant>
            </setBody>
            <setHeader name="OHItem">
                <constant>AutoOffEnabled</constant>
            </setHeader>
            <to uri="direct:setOHItem"/>
            <log message="AutoOffEnabled_aan: bean AutoOffEnabled set to true"/>
            <!-- check whether to turn lights off -->
            <to uri="direct:LightsOffCalc"/>
        </route>

        <route id="ReportMemoryUsage" autoStartup="true" startupOrder="304">
            <!-- s m h day-of-month month day-of-week year(optional) -->
            <from uri="quartz://groep/timer4?cron=4+*+*+*+*+?"/>
            <bean ref="Runtime" method="maxMemory"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:sensors/all/runtime/maxMemory?{{pahoPubOptions}}"/>
            <bean ref="Runtime" method="totalMemory"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:sensors/all/runtime/totalMemory?{{pahoPubOptions}}"/>
            <bean ref="Runtime" method="freeMemory"/>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:sensors/all/runtime/freeMemory?{{pahoPubOptions}}"/>
        </route>

        <!-- Generic entry point for turning on the lights automatically based on light settings -->
        <route id="Enable_lights_on_by_daylight" autoStartup="true" startupOrder="401">
            <from uri="direct:Enable_lights_on_by_daylight"/>
            <to uri="direct:SetHeaders"/>
            <log message="Start Enable_lights_on_by_daylight, header.AutoOnEnabled=${header.AutoOnEnabled}"/>
            <choice>
                <when>
                    <groovy>
                        headers.AutoOnEnabled == 1
                        || headers.AutoOnEnabled == true
                        || "ON".equals(headers.AutoOnEnabled)
                    </groovy>
                    <log message="header.AutoOnEnabled==true=${header.AutoOnEnabled}"/>
                    <when>
                        <!-- it is dark -->
                        <groovy>
                            java.lang.Float.valueOf(headers.LichtIntensiteit_Woonkamer)
                            &lt; java.lang.Float.valueOf(headers.LightsOnIntensityThreshold)
                        </groovy>
                        <log message="Start Enable_lights_on_by_daylight, header.LichtIntensiteit_Woonkamer=${header.LichtIntensiteit_Woonkamer}"/>
                        <log message="Start Enable_lights_on_by_daylight, header.LightsOnIntensityThreshold=${header.LightsOnIntensityThreshold}"/>
                        <log message="Licht gaat aan!"/>
                        <to uri="direct:ZetLichtenAan"/>
                        <!-- disable automatic turning on the lights -->
                        <setBody>
                            <constant>OFF</constant>
                        </setBody>
                        <setHeader name="OHItem">
                            <constant>AutoOnEnabled</constant>
                        </setHeader>
                        <to uri="direct:setOHItem"/>
                    </when>
                </when>
            </choice>
        </route>
        <!-- Generic entry point for turning off the lights automatically based on light settings -->
        <route id="LightsOff" autoStartup="true" startupOrder="402">
            <from uri="direct:LightsOffCalc"/>
            <to uri="direct:SetHeaders"/>
            <log message="LightsOff, header.AutoOffEnabled  =${header.AutoOffEnabled}"/>
            <log message="LightsOff, header.bg_w_tv_w       =${header.bg_w_tv_w}"/>
            <log message="LightsOff, header.Stable          =${header.Stable}"/>
            <log message="LightsOff, header.bg_x_imac3      =${header.bg_x_imac3}"/>
            <log message="LightsOff, header.bg_x_imac4      =${header.bg_x_imac4}"/>
            <log message="LightsOff, header.gGFActivity      =${header.gGFActivity}"/>
            <choice>
                <when>
                    <groovy>
                        "ON".equals(headers.AutoOffEnabled)
                        &amp;&amp; headers.bg_w_tv_w == false
                        &amp;&amp; headers.Stable == true
                        &amp;&amp; headers.bg_x_imac3 == false
                        &amp;&amp; headers.bg_x_imac4 == false <!-- // and imac is off -->
                        &amp;&amp; headers.gGFActivity == 0 <!-- number of active devices like tv, imac, .. -->
                    </groovy>
                    <log message="Licht gaat uit."/>
                    <!-- disable automatic turning off the lights -->
                    <setBody>
                        <constant>OFF</constant>
                    </setBody>
                    <setHeader name="OHItem">
                        <constant>AutoOffEnabled</constant>
                    </setHeader>
                    <to uri="direct:setOHItem"/>
                    <!-- alle lampen direct uitzetten, achterdeurlamp pas na een delay -->
                    <to uri="direct:ZetLichtenUit"/>
                    <!-- delay for only one light (achterdeur)-->
                    <bean ref="GF_Passenger_minutes" method="getMilliSeconds"/>
                    <convertBodyTo type="java.lang.String"/>
                    <convertBodyTo type="java.lang.Long"/>
                    <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="setDelay"/>
                    <bean ref="DelayHuiskamerAchterdeurSchemerlamp" method="restartTimer"/>
                </when>
                <otherwise>
                    <log message="Licht gaat niet uit."/>
                    <choice>
                        <when>
                            <groovy>!"ON".equals(headers.AutoOffEnabled)</groovy>
                            <log message='!"ON".equals(headers.AutoOffEnabled)'/>
                        </when>
                    </choice>
                    <choice>
                        <when>
                            <groovy>!headers.bg_w_tv_w == false</groovy>
                            <log message="!headers.bg_w_tv_w == false"/>
                        </when>
                    </choice>
                    <choice>
                        <when>
                            <groovy>!headers.Stable == true</groovy>
                            <log message="!headers.Stable == true"/>
                        </when>
                    </choice>
                    <choice>
                        <when>
                            <groovy>!headers.bg_x_imac3 == false</groovy>
                            <log message="!headers.bg_x_imac3 == false"/>
                        </when>
                    </choice>
                    <choice>
                        <when>
                            <groovy>!headers.bg_x_imac4 == false</groovy>
                            <log message="!headers.bg_x_imac4 == false"/>
                        </when>
                    </choice>
                    <choice>
                        <when>
                            <groovy>!headers.gGFActivity.toString() == "0"</groovy>
                            <log message="!headers.gGFActivity == 0"/>
                        </when>
                        <otherwise>
                            <log message="headers.gGFActivity == 0; it is ${headers.gGFActivity} or (header) ${header.gGFActivity}"/>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
        </route>

        <!-- SetHeaders. Body contents not altered -->
        <route id="SetHeaders" autoStartup="true" startupOrder="501">
            <from uri="direct:SetHeaders"/>
            <!-- Save body contents in header BodyContents -->
            <setHeader name="BodyContents">
                <simple>${body}</simple>
            </setHeader>
            <log message="Start SetHeaders"/>


            <setHeader name="OHItem">
                <constant>gGFActivity</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <setHeader name="gGFActivity">
                <groovy>Integer.valueOf(request.body)</groovy>
            </setHeader>
            <log message="setHeaders gGFActivity is ${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Integer"/>
            <bean ref="gGFActivity" method="setValue"/>

            <setHeader name="OHItem">
                <constant>LichtIntensiteit_Woonkamer</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <setHeader name="LichtIntensiteit_Woonkamer">
                <groovy>request.body</groovy>
            </setHeader>

            <setHeader name="OHItem">
                <constant>LightsOnIntensityThreshold</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <setHeader name="LightsOnIntensityThreshold">
                <groovy>request.body</groovy>
            </setHeader>

            <setHeader name="OHItem">
                <constant>AutoOnEnabled</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <setHeader name="AutoOnEnabled">
                <groovy>request.body</groovy>
            </setHeader>
            <setHeader name="OHItem">
                <constant>AutoOffEnabled</constant>
            </setHeader>
            <to uri="direct:getOHItem"/>
            <setHeader name="AutoOffEnabled">
                <groovy>request.body</groovy>
            </setHeader>
            <setHeader name="pir_gf_achterdeur17">
                <method ref="pir_gf_achterdeur17" method="getValue"/>
            </setHeader>
            <log message="SetHeader: header.pir_gf_achterdeur17=${header.pir_gf_achterdeur17}"/>
            <setHeader name="bg_w_tv_w">
                <method ref="bg_w_tv_w" method="getValue"/>
            </setHeader>
            <setHeader name="bg_x_imac2">
                <method ref="bg_x_imac2" method="getValue"/>
            </setHeader>
            <setHeader name="bg_x_imac3">
                <method ref="bg_x_imac3" method="getValue"/>
            </setHeader>
            <setHeader name="bg_x_imac4">
                <method ref="bg_x_imac4" method="getValue"/>
            </setHeader>
            <setHeader name="Stable">
                <method ref="Stable" method="getValue"/>
            </setHeader>
            <!-- set header and bean -->
            <to uri="direct:requestLight_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm"/>
        </route>

        <!-- this route is called by bean DelaySetStableTrue -->
        <route id="set_stable_true" autoStartup="true" startupOrder="511">
            <from uri="direct:set_stable_true"/>
            <log message="Start set_stable_true"/>
            <setBody>
                <constant>true</constant>
            </setBody>
            <convertBodyTo type="java.lang.Boolean"/>
            <bean ref="Stable" method="setValue"/>
            <to uri="direct:SetHeaders"/>
            <log message="set_stable_true, header.Stable          =${header.Stable}"/>
            <!-- check whether to turn lights off -->
            <to uri="direct:LightsOffCalc"/>
        </route>

        <route id="set_stable_false" autoStartup="true" startupOrder="512">
            <from uri="direct:set_stable_false"/>
            <log message="Start set_stable_false"/>
            <setBody>
                <constant>false</constant>
            </setBody>
            <convertBodyTo type="java.lang.Boolean"/>
            <bean ref="Stable" method="setValue"/>
            <!-- set timer (milliseconds) to set stable to true -->
            <setBody>
                <constant>45000</constant>
            </setBody>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="DelaySetStableTrue" method="setDelay"/>
            <bean ref="DelaySetStableTrue" method="restartTimer"/>
        </route>


        <!-- this route is called by bean DelaySetHueStableTrue -->
        <route id="set_HueStable_true" autoStartup="true" startupOrder="513">
            <from uri="direct:set_HueStable_true"/>
            <log message="Start set_HueStable_true"/>
            <setBody>
                <constant>true</constant>
            </setBody>
            <convertBodyTo type="java.lang.Boolean"/>
            <bean ref="HueStable" method="setValue"/>
            <!-- check whether to turn lights on -->
            <to uri="direct:calcOneLightOn"/>
            <to uri="direct:calcMediaboxOn"/>
        </route>

        <route id="set_HueStable_false" autoStartup="true" startupOrder="514">
            <from uri="direct:set_HueStable_false"/>
            <log message="Start set_HueStable_false"/>
            <setBody>
                <constant>false</constant>
            </setBody>
            <convertBodyTo type="java.lang.Boolean"/>
            <bean ref="HueStable" method="setValue"/>
            <!-- set timer (milliseconds) to set stable to true -->
            <setBody>
                <constant>15000</constant>
            </setBody>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="DelaySetHueStableTrue" method="setDelay"/>
            <bean ref="DelaySetHueStableTrue" method="restartTimer"/>
        </route>

        <route id="test1" autoStartup="false" startupOrder="9002" streamCache="true">
            <!-- s m h day-of-month month day-of-week year(optional) -->
            <from uri="quartz://groep/timer9002?cron=0/10+*+*+*+*+?"/>
            <log message="Start test1"/>
            <!-- Save body contents -->
            <setHeader name="BodyContents">
                <simple>${body}</simple>
            </setHeader>
            <setHeader name="OHItem">
                <constant>a,b,c</constant>
            </setHeader>
            <to uri="direct:testsplit"/>
            <setBody>
                <constant>d</constant>
            </setBody>
            <to uri="direct:testsplit"/>
            <!-- restore body -->
            <setBody>
                <simple>${header.BodyContents}</simple>
            </setBody>
        </route>

        <route id="testsplit">
            <from uri="direct:testsplit"/>
            <!-- als body een komma bevat, dan splitsen, anders niet. Test met groovy -->
            <log message="Start testsplit, body=${body}, header OHItem=${header.OHItem}"/>
            <when>
                <groovy>headers.OHItem.contains(",")</groovy>
                <log message="header contains ,"/>
                <split>
                    <simple>${header.OHItem}</simple>
                    <log message="OHItem na split is ${header.OHItem}"/>
                    <log message="body na split is ${body}"/>
                </split>
            </when>
        </route>


        <!-- Display temp hum pressure on lcd display -->
        <route id="displayF1_nw_time">
            <from uri="quartz://groep/timerDisplayF1_nw_time?cron=2+*+*+*+*+?"/>
            <!-- to uri="log:nl.vandenzen.iot?level=INFO"/ -->
            <setHeader name="dateTimeString">
                <groovy>new java.text.SimpleDateFormat('dd-MM-yyyy HH:mm:ss').format(request.headers.fireTime)</groovy>
            </setHeader>
            <setBody>
                <groovy>result="0,0,"+request.headers.dateTimeString</groovy>
            </setBody>
            <to uri="paho:camel/f1_nw/display/message/messageAt?{{pahoPubOptions}}"/>
        </route>

        <!-- Display temp hum pressure on lcd display -->
        <route id="displayF1_nw_temperatuur">
            <from uri="paho:oh/all/f1_nw_temperatuur/state?connectionTimeout=600"/>
            <!-- to uri="log:nl.vandenzen.iot?level=INFO"/ -->
            <delay>
                <constant>1000</constant>
            </delay>
            <log message="f1_nw_temperatuur: body=${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <!-- save body -->
            <setHeader name="temperatuur">
                <simple>${body}</simple>
            </setHeader>
            <!-- Display in column 0, row -->
            <setBody>
                <groovy>result="0,1,"+request.headers.temperatuur.take(4)</groovy>
            </setBody>
            <to uri="paho:camel/f1_nw/display/message/messageAt?{{pahoPubOptions}}"/>
            <delay>
                <constant>563</constant>
            </delay>
            <!-- 4 chars for temp (21.3), in column 4 a degree char, dec 223, col 5 letter C -->
            <setBody>
                <constant>4,1</constant>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <setBody>
                <constant>4,1,223</constant>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:camel/f1_nw/display/message/charAt?{{pahoPubOptions}}"/>
            <delay>
                <constant>453</constant>
            </delay>
            <setBody>
                <!-- <constant>5,1,C </constant> -->
                <groovy>result="5,1,C "</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:camel/f1_nw/display/message/messageAt?{{pahoPubOptions}}"/>
        </route>


        <!-- Display temp hum pressure on lcd display -->
        <route id="displayF1_nw_pressure">
            <from uri="paho:oh/all/f1_nw_pressure/state?connectionTimeout=600"/>
            <!-- to uri="log:nl.vandenzen.iot?level=INFO"/ -->
            <delay>
                <constant>5500</constant>
            </delay>
            <log message="f1_nw_pressure: body=${body}"/>
            <convertBodyTo type="java.lang.String"/>
            <!-- save body -->
            <setHeader name="savedBody">
                <simple>${body}</simple>
            </setHeader>
            <!-- temperature ends in column 5 with letter C for Celsius -->
            <!-- 6 chars for pressure (21.3), in column 4 a degree char, dec 223, col 5 letter C -->
            <!-- Display in column x, row y -->
            <setBody>
                <groovy>result="7,1,"+request.headers.savedBody</groovy>
            </setBody>
            <to uri="paho:camel/f1_nw/display/message/messageAt?{{pahoPubOptions}}"/>
            <setBody>
                <constant>13,1,hPa</constant>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <to uri="paho:camel/f1_nw/display/message/messageAt"/>
        </route>
        <route id="adjustBacklight">
            <from uri="paho:oh/all/f1_nw_light/state?connectionTimeout=600"/>
            <!-- We have a byte[] ??? -->
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Float"/>
            <setHeader name="f1_nw_light">
                <groovy>request.body</groovy>
            </setHeader>
            <setHeader name="OHItems">
                <groovy>new String[]{"f1_nw_display_backlight_min","f1_nw_display_backlight_max",
                    "f1_nw_display_backlight_bias","f1_nw_display_backlight_multiplier"}
                </groovy>
            </setHeader>
            <to uri="direct:getOHItems"/>
            <!-- results are in body as String[], make them float -->
            <setHeader name="OHItemsFloat">
                <groovy>new Float[request.headers.OHItems.length]</groovy>
            </setHeader>

            <loop>
                <groovy>result=request.headers.OHItems.length</groovy>
                <setHeader name="dummy">
                    <groovy>
                        request.headers.OHItemsFloat[exchange.allProperties.CamelLoopIndex]=java.lang.Float.valueOf(request.body[exchange.allProperties.CamelLoopIndex])
                    </groovy>
                </setHeader>
            </loop>

            <!-- give log messages some time to print -->
            <delay>
                <constant>1000</constant>
            </delay>
            <!-- restore body -->
            <setBody>
                <groovy>request.headers.f1_nw_light</groovy>
            </setBody>
            <setBody>
                <groovy>
                    result=Math.ceil(Math.max(request.headers.OHItemsFloat[0],
                    Math.min(request.headers.OHItemsFloat[1],
                    request.headers.OHItemsFloat[2]+request.headers.OHItemsFloat[3]*Math.ceil(request.body))))
                </groovy>
            </setBody>
            <convertBodyTo type="java.lang.Integer"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="Adjust paho:camel/f1_nw/display/backlight to ${body}"/>
            <to uri="paho:camel/f1_nw/display/backlight?{{pahoPubOptions}}"/>
        </route>


        <!-- AutoOffMediaboxEnabled -->
        <route id="listenAutoOffMediaboxEnabled" autoStartup="true">
            <from uri="paho:oh/all/AutoOffMediaboxEnabled/state?connectionTimeout=600"/>
            <to uri="direct:convert_body_to_boolean"/>
            <log message="listenAutoOffMediaboxEnabled: AutoOffMediaboxEnabled set to ${body}"/>
            <to uri="direct:calcMediabox"/>
        </route>
        <!-- AutoOnMediaboxEnabled -->
        <route id="listenAutoOnMediaboxEnabled" autoStartup="true">
            <from uri="paho:oh/all/AutoOnMediaboxEnabled/state?connectionTimeout=600"/>
            <to uri="direct:convert_body_to_boolean"/>
            <log message="listenAutoOnMediaboxEnabled: AutoOnMediaboxEnabled set to ${body}"/>
            <to uri="direct:calcMediabox"/>
        </route>
        <!-- PirHue1 -->
        <route id="listenpir_hue1_motion" autoStartup="true">
            <from uri="paho:oh/all/pir_hue1_motion/state?connectionTimeout=600"/>
            <to uri="direct:convert_body_to_boolean"/>
            <log message="listenpir_hue1_motion, body=${body}"/>
            <to uri="direct:calcMediabox"/>
        </route>

        <route id="listen_chromecastAudio" autoStartup="true">
            <from uri="paho:oh/all/bg_w_chromecast_audio/state?connectionTimeout=600"/>
            <log message="chromecast_audio is ${body}"/>
            <to uri="direct:convert_body_to_boolean"/>
            <!-- get old value -->
            <setHeader name="bg_w_chromecast_audio">
                <method ref="bg_w_chromecast_audio" method="getValue"/>
            </setHeader>
            <to uri="direct:convert_body_to_boolean"/>
            <bean ref="bg_w_chromecast_audio" method="setValue"/>
            <!-- restore body contents after log message -->
            <bean ref="bg_w_chromecast_audio" method="getValue"/>
            <!-- Changed? -->
            <choice>
                <when>
                    <simple>${in.headers.bg_w_chromecast_audio} == ${body}</simple>
                    <!-- value has not changed -->
                    <!-- log message="bg_w_chromecast_audio same value old: ${headers.bg_w_chromecast_audio}, new: ${body}"/ -->
                </when>
                <otherwise>
                    <!-- value has changed -->
                    <log message="Values old: ${headers.bg_w_chromecast_audio}, new: ${body}"/>
                    <choice>
                        <when>
                            <!-- when chromecast is turned ON -->
                            <groovy>request.body</groovy>
                            <to uri="direct:calcMediaboxOn"/>
                        </when>
                        <otherwise>
                            <!-- when chromecast is turned off -->
                            <to uri="direct:calcMediaboxOff"/>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
        </route>

        <!-- Zet na een tijdje de AutoOffMediabox ON -->
        <route id="delayedMediaboxOff" autoStartup="true">
            <from uri="direct:delayedMediaboxOff"/>
            <log message="Start delayedMediaboxOff"/>
            <!-- twee minuten, 120s, 120.000 ms, na uitzetten mag evt mediabox uit.
             Tien minuten is 600s, 600.000 ms -->
            <setBody>
                <constant>600000</constant>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="DelayMediaboxOff" method="setDelay"/>
            <bean ref="DelayMediaboxOff" method="restartTimer"/>
        </route>
        <!-- Mediabox gaat aan als: IS MOEILIJK
        - tv aan
        - chromecast aan
        - hue1 pir is aangeweest (even, kwartier geleden)
        - AutoOnMediaboxEnabled aan
        -->
        <route id="calcMediaboxOn" autoStartup="true">
            <from uri="direct:calcMediaboxOn"/>
            <log message="Start calcMediaboxOn"/>
            <!-- REST calls to OpenHab -->
            <setHeader name="OHItems">
                <groovy>new
                    String[]{"bg_w_tv_w","bg_w_chromecast_audio","Plug_GF_Mediabox","AutoOnMediaboxEnabled","pir_hue1_motion",
                    "pir_gf_achterdeur17"}
                </groovy>
            </setHeader>
            <to uri="direct:getOHItems"/>
            <!-- Results are in header OHItemsResult, it is probably a String[] -->
            <to uri="direct:logOHItemsAndResults"/>
            <setHeader name="HueStable">
                <method ref="HueStable" method="getValue"/>
            </setHeader>
            <choice>
                <when>
                    <groovy>
                        (
                        "ON".equals(headers.OHItemsResult[0]) /* tv */
                        ||"ON".equals(headers.OHItemsResult[1]) /* chromecast_audio */
                        ||"ON".equals(headers.OHItemsResult[4]) /* pir hue1 (hall) */
                        ||"OPEN".equals(headers.OHItemsResult[5]) /* pir achterdeur, normally CLOSED */
                        )
                    </groovy>
                    <log message="calcMediaboxOn: it should be on"/>
                    <bean ref="DelayMediaboxOff" method="cancel"/>
                    <choice>
                        <when>
                            <groovy>
                                "OFF".equals(headers.OHItemsResult[2]) /* mediabox is off */
                                &amp;&amp; "ON".equals(headers.OHItemsResult[3]) /* autoOnMediabox */
                            </groovy>
                            <log message="calcMediaboxOn, turning it on"/>
                            <!-- En zet de mediabox aan -->
                            <to uri="direct:zetMediaboxAan"/>
                        </when>
                    </choice>
                </when>
            </choice>
        </route>
        <!-- Mag uit als:
        - tv uit
        - chromecast uit
        - AutoOffMediaboxEnabled aan
        -->
        <route id="calcMediaboxOff" autoStartup="true">
            <from uri="direct:calcMediaboxOff"/>
            <!-- REST calls to OpenHab -->
            <setHeader name="OHItems">
                <groovy>new
                    String[]{"bg_w_tv_w","bg_w_chromecast_audio","Plug_GF_Mediabox","AutoOffMediaboxEnabled","pir_hue1_motion",
                    "pir_gf_achterdeur17"}
                </groovy>
            </setHeader>
            <to uri="direct:getOHItems"/>
            <!-- Results are in header OHItemsResult, it is probably a String[] -->
            <to uri="direct:logOHItemsAndResults"/>
            <setHeader name="DelayMediaboxOff">
                <method ref="DelayMediaboxOff" method="isRunning"/>
            </setHeader>
            <choice>
                <when>
                    <groovy>
                        (
                        "OFF".equals(request.headers.OHItemsResult[0]) /* tv */
                        &amp;&amp; "OFF".equals(request.headers.OHItemsResult[1]) /* chromecast_audio */
                        &amp;&amp;"OFF".equals(headers.OHItemsResult[4]) /* pir hue1 (hall) */
                        &amp;&amp;"CLOSED".equals(headers.OHItemsResult[5]) /* pir achterdeur, normally CLOSED */
                        )
                        &amp;&amp;
                        ("ON".equals(request.headers.OHItemsResult[3])) /* autoOffMediabox */
                        &amp;&amp; "ON".equals(headers.OHItemsResult[2]) /* mediabox is on */
                    </groovy>
                    <choice>
                        <when>
                            <groovy>headers.DelayMediaboxOff</groovy>
                            <!-- Is already going to be turned off, timer is running -->
                        </when>
                        <otherwise>
                            <!-- tv or chromecast is/are off -->
                            <!-- mediabox mag uit -->
                            <log message="mediabox gaat uit (na een delay)"/>
                            <to uri="direct:delayedMediaboxOff"/>
                        </otherwise>
                    </choice>
                </when>
            </choice>
        </route>

        <route id="calcMediabox" autoStartup="true">
            <from uri="direct:calcMediabox"/>
            <to uri="direct:calcMediaboxOn"/>
            <to uri="direct:calcMediaboxOff"/>
        </route>

        <route id="cronAutoOnMediabox" autoStartup="true">
            <from uri="quartz://groep/timerAutoOnMediabox?cron=7+25+7+*+*+?"/>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <setHeader name="OHItem">
                <constant>AutoOnMediaboxEnabled</constant>
            </setHeader>
            <to uri="direct:setOHItem"/>
            <to uri="direct:calcMediaboxOn"/>
        </route>
        <!-- Because tv will turn on in the night (to update software), disable
        the autoOnMediabox at night -->
        <route id="cronAutoOnMediaboxOff" autoStartup="true">
            <from uri="quartz://groep/timerAutoOnMediaboxOff?cron=9+57+23+*+*+?"/>
            <setBody>
                <constant>OFF</constant>
            </setBody>
            <setHeader name="OHItem">
                <constant>AutoOnMediaboxEnabled</constant>
            </setHeader>
            <to uri="direct:setOHItem"/>
        </route>
        <route id="cronAutoOffMediabox" autoStartup="true">
            <from uri="quartz://groep/timerAutoOffMediabox?cron=7+37+22+*+*+?"/>
            <log message="Start cronAutoOffMediabox"/>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <setHeader name="OHItem">
                <constant>AutoOffMediaboxEnabled</constant>
            </setHeader>
            <to uri="direct:setOHItem"/>
            <to uri="direct:calcMediaboxOff"/>
        </route>
        <!-- the callback code from a delay bean, AutoOffMediabox will be turned OFF -->
        <route id="DelayMediaboxOff">
            <from uri="direct:DelayMediaboxOff"/>
            <to uri="direct:zetMediaboxUit"/>
        </route>
        <route id="ZetMediaboxAan">
            <from uri="direct:zetMediaboxAan"/>
            <!-- cancel timer that would turn Mediabox off -->
            <bean ref="DelayMediaboxOff" method="cancel"/>
            <setHeader name="OHItem">
                <groovy>"Plug_GF_Mediabox"
                </groovy>
            </setHeader>
            <setBody>
                <constant>ON</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
        </route>
        <route id="ZetMediaboxUit">
            <from uri="direct:zetMediaboxUit"/>
            <setHeader name="OHItem">
                <groovy>"Plug_GF_Mediabox"
                </groovy>
            </setHeader>
            <setBody>
                <constant>OFF</constant>
            </setBody>
            <to uri="direct:setOHItem"/>
        </route>

        <route id="logOHItemsAndResults" autoStartup="true">
            <!-- debug -->
            <from uri="direct:logOHItemsAndResults"/>
            <loop>
                <groovy>result=request.headers.OHItemsResult.length</groovy>
                <setBody>
                    <groovy>
                        java.util.logging.Logger logger = java.util.logging.Logger.getLogger("");
                        logger.info ("OHItemsResult for " +
                        request.headers.OHItems[exchange.allProperties.CamelLoopIndex]
                        +"="
                        +request.headers.OHItemsResult[exchange.allProperties.CamelLoopIndex]);
                        result=5; /* dummy */
                    </groovy>
                </setBody>
            </loop>
        </route>

    </camelContext>
    <!-- bean id="autoOnEnabled" class="java.util.concurrent.atomic.AtomicReference"/ -->
    <bean id="AutoOnEnabled" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="AutoOffEnabled" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="pir_gf_achterdeur17" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="LightsEnableIntensityThreshold" class="nl.vandenzen.iot.util.MutableInteger">
        <property name="value" value="31"/>
    </bean>
    <bean id="Light_GF_Huiskamer_Achterdeur_Schemerlamp_Dimm" class="nl.vandenzen.iot.util.MutableFloat"/>
    <bean id="Light_GF_Huiskamer_Achter_Staandelamp" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="GF_Passenger_minutes" class="nl.vandenzen.iot.util.MutableLong">
        <property name="value" value="1"/>
    </bean>


    <bean id="bg_w_tv_w" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="bg_x_imac2" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="bg_x_imac3" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="bg_x_imac4" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="gGFActivity" class="nl.vandenzen.iot.util.MutableInteger"/>
    <bean id="bg_w_chromecast_audio" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <!-- only after some time the state of tv and imac is stable -->
    <bean id="Stable" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <!-- only after some time the state of hue is stable, polling time is 10 seconds! -->
    <bean id="HueStable" class="nl.vandenzen.iot.util.MutableBoolean"/>
    <bean id="DelayHuiskamerAchterdeurSchemerlamp" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <!-- The uri to call when delay has finished -->
        <argument value="direct:achterlichtuit2020"/>
    </bean>
    <bean id="DelaySetStableTrue" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:set_stable_true"/>
    </bean>
    <bean id="DelaySetHueStableTrue" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:set_HueStable_true"/>
    </bean>
    <!-- Turn off the mediabox after some time -->
    <bean id="DelayMediaboxOff" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:DelayMediaboxOff"/>
    </bean>
    <!-- For memory size reporting -->
    <bean id="Runtime" class="java.lang.Runtime"
          factory-method="getRuntime"/>


    <bean id="quartz" class="org.apache.camel.component.quartz.QuartzComponent">
        <property name="startDelayedSeconds" value="20"/>
    </bean>


</blueprint>
