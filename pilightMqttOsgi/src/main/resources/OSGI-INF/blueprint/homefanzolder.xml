<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0">

    <camelContext xmlns="http://camel.apache.org/schema/blueprint" id="homefanzolder">

        <route id="convert_body_to_boolean" autoStartup="true" startupOrder="7">
            <from uri="direct:convert_body_to_boolean"/>
            <log message="convert_body_to_boolean entry body=${body}"/>
            <choice>
                <when>
                    <groovy>"1".equals(request.body)
                        || request.body == 1
                        || request.body == true
                        || "ON".equals(request.body)
                        || "true".equals(request.body)
                        || (request.body!=null &amp;&amp; new String(request.body).equals("1".toString())) /* input is
                        byte[] */
                    </groovy>
                    <setBody>
                        <constant>true</constant>
                    </setBody>
                </when>
                <otherwise>
                    <setBody>
                        <constant>false</constant>
                    </setBody>
                </otherwise>
            </choice>
            <convertBodyTo type="java.lang.Boolean"/>
            <log message="convert_body_to_boolean return body=${body}"/>
        </route>

        <route id="startHomeFan" autoStartup="true">
            <from uri="direct:startHomeFan"/>
            <log message="Start startHomeFan, body=${body}"/>
            <!-- If fan is not stable, turn it to "low" (command=4), wait
            a few seconds, turn it to "Timer1" (command=8) -->
            <bean ref="ToiletTimeoutEnabled" method="getValue"/>
            <setHeader name="ToiletTimeoutEnabled">
                <groovy>request.body</groovy>
            </setHeader>
            <bean ref="FanIsRunningTimer" method="isRunning"/>
            <choice>
                <when>
                    <groovy>(request.body==true) &amp;&amp; (headers.ToiletTimeoutEnabled == true)</groovy>
                    <log message="startHomeFan, fan already started, body=${body}"/>
                </when>
                <otherwise>
                    <!-- is not stable, so start new cycle: low, wait Timer1 -->
                    <log message="startHomeFan, start fan (low, wait, Timer1), body=${body}"/>
                    <!-- Start timer -->
                    <setBody>
                        <!-- 1000*60*10 is 10 minutes -->
                        <bean ref="homeFan" method="getRuntimeFanMinutes"/>
                    </setBody>
                    <setBody>
                        <groovy>result=1000*60*request.body</groovy>
                    </setBody>
                    <convertBodyTo type="java.lang.String"/>
                    <convertBodyTo type="java.lang.Long"/>
                    <bean ref="FanIsRunningTimer" method="setDelay"/>
                    <bean ref="FanIsRunningTimer" method="restartTimer"/>
                    <bean ref="homeFan" method="getCommandStart1"/>
                    <to uri="direct:sendCommandToFan"/>
                    <bean ref="homeFan" method="getCommandStart2"/>
                    <to uri="direct:sendCommandToFan"/>
                    <bean ref="homeFan" method="getCommandStart3"/>
                    <to uri="direct:sendCommandToFan"/>
                </otherwise>
            </choice>
        </route>
        <route id="stopHomeFan" autoStartup="true">
            <from uri="direct:stopHomeFan"/>
            <log message="Start stopHomeFan, body=${body}"/>
            <!-- is not stable, so start new cycle: low, wait Timer1 -->
            <log message="stopHomeFan"/>
                <bean ref="homeFan" method="getCommandStop"/>
            <to uri="direct:sendCommandToFan"/>
            <bean ref="FanIsRunningTimer" method="cancel"/>
        </route>
        <!-- Listen to openhab gateway -->
        <route id="listenPir_gf_toilet" autoStartup="true">
            <from uri="paho:mysensors/all/155/1/1/0/2?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="listenPir_gf_toilet locA is ${body}"/>
            <to uri="direct:convert_body_to_boolean"/>
            <!-- simply always start fan -->
            <log message="listenPir_gf_toilet: Start fan is ${body}"/>
                <bean ref="homeFan" method="getTimerToiletMinutes"/>
            <setBody>
                <!-- 1000*60*10 is 10 minutes nalooptijd -->
                <groovy>result=1000*60*request.body</groovy>
            </setBody>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Long"/>
            <bean ref="RequestFanOnForToilet" method="setDelay"/>
            <!-- restartTimer will start a new Timer with new delay -->
            <bean ref="RequestFanOnForToilet" method="restartTimer"/>
            <to uri="direct:startHomeFan"/>
        </route>
        <!-- Listen to mqtt messages, just for debugging -->
        <route id="listenMqttToMySensorsHomeFan" autoStartup="true">
            <!-- 20211112 Bug still present in paho client: it does not accept wildcard + as first level -->
            <!-- See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437839 -->
            <from uri="paho:c/mysensors/156/8/1/0/24?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="listen to messages meant for HomeFan, mqtt topic +/mysensors/156/8/1/0/24, body=${body}"/>
        </route>

        <!-- do not use this hue sensor anymore, autoStartup disabled -->
        <route id="listenPir_gf_toilet_hue_motion_sensor" autoStartup="false">
            <from uri="paho:oh/all/pir_toilet_motion/state?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <log message="listenPir_gf_toilet_hue_motion locA is ${body}"/>
            <to uri="direct:convert_body_to_boolean"/>
            <!-- simply always start fan -->
            <to uri="direct:startHomeFan"/>
        </route>

        <route id="ListenHotWaterTemp" autoStartup="true">
            <from uri="paho:mysensors/all/156/0/1/0/0?connectionTimeout=600"/>
            <convertBodyTo type="java.lang.String"/>
            <convertBodyTo type="java.lang.Float"/>
            <bean ref="hotWaterTemperature" method="setValue"/>
            <log message="ListenHotWaterTemp locA is ${body}"/>
            <!-- If hotter than 49.1 degrees, start fan -->
            <choice>
                <when>
                    <groovy>result=java.lang.Float.valueOf(request.body)>45.1f</groovy>
                    <log message="ListenHotWaterTemp: Start fan, body=${body}"/>
                    <setBody>
                        <bean ref="homeFan" method="getTimerHotwaterMinutes"/>
                    </setBody>
                    <setBody>
                        <!-- 1000*60*10 is 10 minutes nalooptijd -->
                        <groovy>result=1000*60*request.body</groovy>
                    </setBody>
                    <convertBodyTo type="java.lang.String"/>
                    <convertBodyTo type="java.lang.Long"/>
                    <bean ref="RequestFanOnForHotWater" method="setDelay"/>
                    <!-- restartTimer will start a new Timer with new delay -->
                    <bean ref="RequestFanOnForHotWater" method="restartTimer"/>
                    <to uri="direct:startHomeFan"/>
                </when>
            </choice>
        </route>

        <route id="sendCommandToFan" autoStartup="true">
            <from uri="direct:sendCommandToFan"/>
            <convertBodyTo type="java.lang.String"/>
            <choice>
                <when>
                    <groovy>!"0".equals(request.body)</groovy>
                    <to uri="paho:c/mysensors/156/8/1/0/24?{{pahoPubOptions}}"/>
                    <log message="sendCommandToFan, mqtt sent to c/mysensors/156/8/1/0/24?{{pahoPubOptions}}, body=${body}"/>
                    <delay>
                        <constant>1000</constant>
                    </delay>
                </when>
                <otherwise>
                    <log message="sendCommandToFan, no message sent to home fan, body is zero, body=${body}"/>
                </otherwise>
            </choice>
        </route>

        <route id="ShouldFanRun" autoStartup="true">
            <from uri="direct:ShouldFanRun"/>
            <bean ref="RequestFanOnForHotWater" method="isRunning"/>
            <setHeader name="reqSaved">
                <groovy>request.body</groovy>
            </setHeader>
            <bean ref="RequestFanOnForToilet" method="isRunning"/>
            <setHeader name="reqSaved">
                <groovy>request.body||headers.reqSaved</groovy>
            </setHeader>
            <choice>
                <when>
                    <groovy>headers.reqSaved</groovy>
                    <!-- fan must be (re)started -->
                    <to uri="direct:startHomeFan"/>
                </when>
                <otherwise>
                    <!-- Stop fan -->
                    <to uri="direct:stopHomeFan"/>
                </otherwise>
            </choice>

        </route>


        <!-- Listen to ToiletTimeoutEnabled -->
        <route id="ToiletTimeoutEnabled">
            <from uri="paho:oh/all/ToiletTimeoutEnabled/state?connectionTimeout=600"/>
            <convertBodyTo type="Boolean"/>
            <bean ref="ToiletTimeoutEnabled" method="setValue"/>
        </route>

        <route id="dummy">
            <from uri="direct:dummy"/>
            <!-- some dummy action -->
            <bean ref="RequestFanOnForHotWater" method="isRunning"/>
        </route>

        <!--
        
    int timerToiletMinutes=16;
    int timerHotwaterMinutes=20;
    int runtimeFanMinutes=8; // if Timer1 command is issued, fan will run for approx. 10 minutes. So restart it before this time
    int commandStart1=4; // First command to send to start fan
    int commandStart2=8; // Second command, 8=Timer1 (10 minutes), 9=Timer2 (20 minutes), 10=Timer3 (30 minutes)
    int commandStart3=0; // not needed
    int commandStop=4;
    -->
        <route id="setTimerToiletMinutes" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/timerToiletMinutes"/>
            <bean ref="homeFan" method="setTimerToiletMinutes(${body})"/>
        </route>
        <route id="setTimerHotwaterMinutes" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/timerHotwaterMinutes"/>
            <bean ref="homeFan" method="setTimerHotwaterMinutes(${body})"/>
        </route>
        <route id="setruntimeFanMinutes" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/runtimeFanMinutes"/>
            <bean ref="homeFan" method="setRuntimeFanMinutes(${body})"/>
        </route>
        <route id="commandStart1" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/commandStart1"/>
            <bean ref="homeFan" method="setCommandStart1(${body})"/>
        </route>
        <route id="commandStart2" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/commandStart2"/>
            <bean ref="homeFan" method="setCommandStart2(${body})"/>
        </route>
        <route id="commandStart3" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/commandStart3"/>
            <bean ref="homeFan" method="setCommandStart3(${body})"/>
        </route>
        <route id="commandStop" autoStartup="true">
            <from uri="paho:+/f2_ne/fan/commandStop"/>
            <bean ref="homeFan" method="setCommandStop(${body})"/>
        </route>
        <route id="setHotWaterTemperatureThreshold">
            <from uri="paho:+/f2_ne/fan/hotWaterTemperatureThreshold"/>
            <bean ref="homeFan" method="setHotWaterTemperatureThreshold"/>
        </route>
        <route id="listenForFanSettingCommandsDebug">
            <from uri="paho:+/f2_ne/fan/#"/>
            <log message="listenForFanSettingCommandsDebug, CamelMqttTopic={header.CamelMqttTopic}"/>
        </route>

    </camelContext>

    <bean id="ToiletTimeoutEnabled" class="nl.vandenzen.iot.util.MutableBoolean">
        <property name="value" value="true"/>
    </bean>
    <bean id="FanIsRunningTimer" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:ShouldFanRun"/>
    </bean>
    <bean id="RequestFanOnForHotWater" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:ShouldFanRun"/>
    </bean>
    <bean id="RequestFanOnForToilet" class="nl.vandenzen.iot.beans.ExtendableDelay">
        <argument value="direct:ShouldFanRun"/>
    </bean>
    <bean id="homeFan" class="nl.vandenzen.iot.beans.HomeFan"/>
    <bean id="hotWaterTemperature" class="nl.vandenzen.iot.util.MutableFloat"/>

</blueprint>
